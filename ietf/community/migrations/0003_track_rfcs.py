# Generated by Django 4.2.3 on 2023-07-07 18:33

from django.db import migrations


def forward(apps, schema_editor):
    """Track any RFCs that were created from tracked drafts"""
    CommunityList = apps.get_model("community", "CommunityList")
    RelatedDocument = apps.get_model("doc", "RelatedDocument")

    # Handle individually tracked documents
    for cl in CommunityList.objects.all():
        for rfc in set(
            RelatedDocument.objects.filter(
                source__in=cl.added_docs.all(),
                relationship__slug="became_rfc",
            ).values_list("target__docs", flat=True)
        ):
            cl.added_docs.add(rfc)

    # Handle rules
    SearchRule = apps.get_model("community", "SearchRule")
    State = apps.get_model("doc", "State")
    draft_rfc_state = State.objects.get(type_id="draft", slug="rfc")
    rfc_published_state = State.objects.get(type_id="rfc", slug="published")
    SearchRule.objects.filter(state=draft_rfc_state).update(state=rfc_published_state)


def reverse(apps, schema_editor):
    Document = apps.get_model("doc", "Document")
    for rfc in Document.objects.filter(type__slug="rfc"):
        rfc.communitylist_set.clear()

    SearchRule = apps.get_model("community", "SearchRule")
    State = apps.get_model("doc", "State")
    draft_rfc_state = State.objects.get(type_id="draft", slug="rfc")
    rfc_published_state = State.objects.get(type_id="rfc", slug="published")
    SearchRule.objects.filter(state=rfc_published_state).update(state=draft_rfc_state)


class Migration(migrations.Migration):
    dependencies = [
        ("community", "0002_auto_20230320_1222"),
        ("doc", "0010_move_rfc_docaliases"),
    ]
    
    operations = [migrations.RunPython(forward, reverse)]
